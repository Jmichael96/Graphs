{"version":3,"sources":["Store/actions/actionTypes.js","Store/sagas/ApiErrors.js","Store/sagas/index.js","Store/reducers/TubingPressure.js","Store/reducers/CasingPressure.js","Store/reducers/FlareTemp.js","Store/reducers/InjValveOpen.js","Store/reducers/OilTemp.js","Store/reducers/WaterTemp.js","Components/WaterTemp/Index.js","Store/actions/actions.js","Components/Metrics/Metrics.jsx","Components/Utils/Wrapper.jsx","Components/TubingPressure/TubingPressure.js","Components/CasingPressure/Index.js","Components/FlareTemp/Index.js","Components/InjValve/Index.js","Components/OilTemp/Index.js","Components/Chart/Chart.jsx","App.jsx","Store/index.js","serviceWorker.js","index.jsx"],"names":["API_ERROR","RECIEVED_WATER","apiErrorReceived","watchApiError","action","call","toast","error","takeEvery","actions","ApiErrors","initialState","metric","value","unit","at","fullDate","state","updatedObject","type","useStyles","makeStyles","paper","width","height","margin","border","root","color","marginLeft","checked","data","fontSize","fontWeight","GET_WATER","gql","getWaterData","water","metricName","classes","useState","isChecked","setState","dispatch","useDispatch","useSelector","useQuery","variables","pollInterval","loading","startPolling","stopPolling","useEffect","message","getLastKnownMeasurement","formattedDate","Date","newDateForm","Moment","format","name","lastValue","length","LinearProgress","Paper","className","FormControlLabel","control","Checkbox","onChange","event","target","label","labelPlacement","Metrics","props","this","fetchWaterAction","React","Component","metrics","withStyles","theme","connect","wrapper","display","flexFlow","padding","justifyContent","alignContent","Wrapper","GET_TUBING","getPressureData","tubing","GET_CASING","getCasingData","casing","GET_FLARE","getFlareData","flare","GET_INJVALVE","getInjValveData","injValve","GET_OIL","getOilData","oil","Chart","updateState","tubingVal","waterVal","oilVal","injVal","flareVal","casingVal","gettingData","updateHandler","windowSize","window","innerWidth","y","x","mode","hovertemplate","line","yaxis","newData","useResizeHandler","onInitialized","layout","title","showlegend","autosize","dragmode","xaxis","domain","autorange","showgrid","zeroline","showline","tickformat","titlefont","tickfont","range","tickwidth","position","yaxis2","anchor","overlaying","side","yaxis3","chart","borderRadius","store","rootReducer","combineReducers","tubingReducer","casingReducer","flareReducer","injValveReducer","oilTempReducer","waterTempReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","sagas","forEach","run","console","log","App","CssBaseline","Boolean","location","hostname","match","urlClient","ApolloClient","uri","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f27cfea3.chunk.js","sourcesContent":["export const API_ERROR = 'EVENT/API_ERROR_RECIEVED';\nexport const RECIEVED_TUBING = 'EVENT/RECIEVED_TUBING';\nexport const RECIEVED_WATER = 'EVENT/RECIEVED_WATER';\nexport const FETCHING_WATER = 'EVENT/FETCHING_WATER';\nexport const RECIEVED_OIL = 'EVENT/RECIEVED_OIL';\nexport const RECIEVED_INJ_VALVE = 'EVENT/RECIEVED_INJ_VALVE';\nexport const RECIEVED_FLARE = 'EVENT/RECIEVED_FLARE';\nexport const RECIEVED_CASING = 'EVENT/RECIEVED_FLARE';\nexport const FETCH_METRICS = 'EVENT/FETCH_METRICS';\n\nexport default {\n    API_ERROR,\n    RECIEVED_CASING,\n    RECIEVED_TUBING,\n    RECIEVED_WATER,\n    RECIEVED_FLARE,\n    RECIEVED_INJ_VALVE,\n    FETCH_METRICS,\n    FETCHING_WATER,\n}","import { takeEvery, call } from \"redux-saga/effects\";\nimport * as actions from \"../actions/actionTypes\";\nimport { toast } from \"react-toastify\";\n\nfunction* apiErrorReceived(action) {\n  yield call(toast.error, `Error Received: ${action.error}`);\n}\n\nfunction* watchApiError() {\n  yield takeEvery(actions.API_ERROR, apiErrorReceived);\n}\n\nexport default [watchApiError];\n","import ApiErrors from \"./ApiErrors\";\n\nexport default [...ApiErrors];","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_TUBING:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_CASING:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}\n","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_FLARE:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_INJ_VALVE:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_OIL:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_WATER:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from '../../Store/actions/actionTypes';\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"blue\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\n\nconst GET_WATER = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getWaterData = state => {\n  const { metric, value, unit, at, fullDate } = state.water;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"waterTemp\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getWaterData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_WATER, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.RECIEVED_WATER, updatedObject });\n    },\n    [dispatch, error, data]\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n\n  let lastValue = value[value.length - 1];\n\n  if (loading) return <LinearProgress />;\n  \n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} F</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import * as action from './actionTypes';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from \"graphql-tag\";\n\nconst GET_WATER = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\nexport const fetchWaterAction = (value, metric, unit) => (dispatch) => {\n    const metricName = 'waterTemp';\n    const { loading, error, data, startPolling, stopPolling } = useQuery(GET_WATER, {\n        variables: { metricName },\n        pollInterval: 0,\n    });\n\n    if (error) {\n        dispatch({ type: action.API_ERROR, message: error.message });\n        return;\n    }\n    const { getLastKnownMeasurement } = data;\n    let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        unit: getLastKnownMeasurement.unit,\n    }\n    console.log(updatedObject);\n    dispatch({ type: action.RECIEVED_WATER, updatedObject });\n};\nexport const getWater = (value, metric, unit) => {\n    return {\n        type: action.FETCHING_WATER,\n        value,\n        metric,\n        unit\n    }\n}","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { fetchWaterAction } from '../../Store/actions/actions';\n\nconst metricStyles = theme => ({\n\n});\n\nclass Metrics extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n\n    componentDidMount() {\n        // console.log('the class component water!');\n    //    console.log( this.props.water);\n       const { value, unit, metric } = this.props.water;\n       let updatedObject = {\n           value,\n           unit,\n           metric\n       }\n       fetchWaterAction();\n       this.props.fetchWaterAction()\n    //    console.log(this.props.fetchWaterAction())\n    //    this.props.fetchWater(updatedObject)\n    }\n\n    // getWaterData = (state) => {\n    //     const { metric, value, unit } = state.water;\n    //     return {\n    //         metric,\n    //         value,\n    //         unit\n    //     }\n    // }\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <h2>Data!</h2>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    water: state.water,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    // fetchWaterAction: () => dispatch(fetchWaterAction()),\n    // fetchWater: () => dispatch(fetchWater())\n});\n\nconst metrics = withStyles(metricStyles)(Metrics);\nexport default connect(mapStateToProps, mapDispatchToProps)(metrics);","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        height: '100%',\n        display: 'flex',\n        flexFlow: 'row wrap',\n        padding: '20px',\n        justifyContent: 'center',\n        alignContent: 'flex-start',\n    },\n}));\n\nfunction Wrapper(props) {\n    const classes = useStyles(useStyles);\n\n    return <main className={classes.wrapper} {...props} />;\n};\n\nexport default Wrapper;","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from '../../Store/actions/actionTypes';\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"red\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\n\nconst GET_TUBING = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getPressureData = state => {\n  const { metric, value, unit, at, fullDate } = state.tubing;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"tubingPressure\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getPressureData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_TUBING, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.RECIEVED_TUBING, updatedObject });\n    },\n    [dispatch, error, data]\n\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n  // getting the last value of the state value array\n  let lastValue = value[value.length - 1];\n  \n  if (loading) return <LinearProgress />;\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} PSI</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from '../../Store/actions/actionTypes';\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"orange\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  },\n});\n\nconst GET_CASING = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getCasingData = state => {\n  const { metric, value, unit, at, fullDate } = state.casing;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"casingPressure\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getCasingData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_CASING, {\n    variables: { metricName },\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.RECIEVED_CASING, updatedObject });\n    },\n    [dispatch, error, data]\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n\n  // getting the last value of the state value array\n  let lastValue = value[value.length - 1];\n  \n  if (loading) return <LinearProgress />;\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} PSI</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from '../../Store/actions/actionTypes';\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"pink\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\nconst GET_FLARE = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getFlareData = state => {\n  const { metric, value, unit, at, fullDate } = state.flare;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"flareTemp\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getFlareData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_FLARE, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.RECIEVED_FLARE, updatedObject });\n    },\n    [dispatch, error, data]\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n  // getting the last value of the state value array\n  let lastValue = value[value.length - 1];\n  \n  if (loading) return <LinearProgress />;\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} F</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from '../../Store/actions/actionTypes';\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"green\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\n\nconst GET_INJVALVE = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getInjValveData = state => {\n  const { metric, value, unit, at, fullDate } = state.injValve;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"injValveOpen\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getInjValveData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_INJVALVE, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.RECIEVED_INJ_VALVE, updatedObject });\n    },\n    [dispatch, error, data]\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n  // getting the last value of the state value array\n  let lastValue = value[value.length - 1];\n  \n  if (loading) return <LinearProgress />;\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} %</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from '../../Store/actions/actionTypes';\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"black\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\nconst GET_OIL = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getOilData = state => {\n  const { metric, value, unit, at, fullDate } = state.oil;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"oilTemp\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getOilData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_OIL, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.RECIEVED_OIL, updatedObject });\n    },\n    [dispatch, error, data]\n\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n  // getting the last value of the state value array\n  let lastValue = value[value.length - 1];\n  \n  if (loading) return <LinearProgress />;\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} F</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { connect } from \"react-redux\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst chartStyles = theme => ({\n  chart: {\n    border: \"2px solid black\",\n    borderRadius: \"4px\"\n  }\n});\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      tubingVal: null,\n      flareVal: null,\n      injVal: null,\n      oilVal: null,\n      waterVal: null,\n      casingVal: null,\n      gettingData: false,\n    }\n  }\n\n  componentWillReceiveProps() {\n    // if there is data from the store... update state\n    if (this.props) {\n      this.updateState();\n    }\n  }\n\n  updateState = () => {\n    this.setState({\n      tubingVal: this.props.tubing.value,\n      waterVal: this.props.water.value,\n      oilVal: this.props.oil.value,\n      injVal: this.props.injValve.value,\n      flareVal: this.props.flare.value,\n      casingVal: this.props.casing.value,\n      gettingData: true\n    });\n  }\n\n  updateHandler = () => {\n    // console.log(\"Chart has been initialized\");\n  }\n\n  render() {\n    const windowSize = window.innerWidth - 150;\n    const { tubingVal, oilVal, casingVal, injVal, waterVal, flareVal } = this.state;\n    const tubing = {\n      type: 'scatter',\n      y: tubingVal,\n      x: this.props.tubing.fullDate,\n      mode: 'lines',\n      name: this.props.tubing.metric,\n      hovertemplate: `${this.props.tubing.at} <br> ${this.props.tubing.metric}: %{y:.2f}<extra></extra>`,\n      line: {\n        color: 'red',\n        width: 2\n      }\n    };\n\n    const casing = {\n      type: 'scatter',\n      x: this.props.casing.fullDate,\n      y: casingVal,\n      mode: 'lines',\n      name: this.props.casing.metric,\n      hovertemplate: `${this.props.casing.at} <br> ${this.props.casing.metric}: %{y:.2f}<extra></extra>`,\n      line: {\n        color: 'orange',\n        width: 2\n      },\n    };\n\n    const oil = {\n      type: 'scatter',\n      y: oilVal,\n      x: this.props.oil.fullDate,\n      mode: 'lines',\n      name: this.props.oil.metric,\n      hovertemplate: `${this.props.oil.at} <br> ${this.props.oil.metric}: %{y:.2f}<extra></extra>`,\n      yaxis: 'y3',\n      line: {\n        color: 'black',\n        width: 2\n      }\n    };\n    const water = {\n      type: 'scatter',\n      y: waterVal,\n      x: this.props.water.fullDate,\n      yaxis: 'y3',\n      mode: 'lines',\n      name: this.props.water.metric,\n      hovertemplate: `${this.props.water.at} <br> ${this.props.water.metric}: %{y:.2f}<extra></extra>`,\n      line: {\n        color: 'blue',\n        width: 2\n      }\n    };\n    const flare = {\n      type: 'scatter',\n      x: this.props.flare.fullDate,\n      y: flareVal,\n      mode: 'lines',\n      name: this.props.flare.metric,\n      hovertemplate: `${this.props.flare.at} <br> ${this.props.flare.metric}: %{y:.2f}<extra></extra>`,\n      yaxis: 'y3',\n      line: {\n        color: 'pink',\n        width: 2\n      }\n    };\n    const injValve = {\n      type: 'scatter',\n      x: this.props.injValve.fullDate,\n      y: injVal,\n      yaxis: 'y2',\n      mode: 'lines',\n      name: this.props.injValve.metric,\n      hovertemplate: `${this.props.injValve.at} <br> ${this.props.injValve.metric}: %{y:.2f}<extra></extra>`,\n      line: {\n        color: 'green',\n        width: 2\n      }\n    };\n\n    const newData = [tubing, oil, injValve, flare, water, casing];\n    const { classes } = this.props;\n    return (\n      <Plot\n        data={newData}\n        useResizeHandler={true}\n        onInitialized={this.updateHandler}\n        layout={{\n          width: windowSize,\n          height: 650,\n          title: 'Metric Data Chart',\n          showlegend: true,\n          autosize: false,\n          dragmode: true,\n          xaxis: {\n            domain: [0.18, 1],\n            type: 'date',\n            autorange: true,\n            showgrid: false,\n            zeroline: false,\n            showline: false,\n            tickformat: '%-I:%M:%S'\n          },\n          yaxis: {\n            title: 'PSI',\n            titlefont: { color: '#1f77b4' },\n            tickfont: { color: '#1f77b4' },\n            showgrid: false,\n            range: [0, 2000],\n            showline: true,\n            tickwidth: 1,\n            position: 0.14,\n            type: 'linear',\n          },\n          yaxis2: {\n            title: 'Percent',\n            titlefont: { color: '#ff7f0e' },\n            tickfont: { color: '#ff7f0e' },\n            anchor: 'free',\n            overlaying: 'y',\n            side: 'left',\n            showgrid: false,\n            showline: true,\n            position: 0.07,\n            tickwidth: 1,\n            range: [0, 100],\n            type: 'linear',\n          },\n          yaxis3: {\n            title: 'Degrees',\n            titlefont: { color: 'red' },\n            tickfont: { color: 'red' },\n            anchor: 'free',\n            overlaying: 'y',\n            side: 'left',\n            showgrid: false,\n            showline: true,\n            position: 0,\n            tickwidth: 1,\n            range: [0, 500],\n            autorange: true,\n            zeroline: false,\n            type: 'linear',\n          },\n        }}\n        className={classes.chart}\n      />\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => ({\n  tubing: state.tubing,\n  water: state.water,\n  casing: state.casing,\n  flare: state.flare,\n  oil: state.oil,\n  injValve: state.injValve\n})\nconst chart = withStyles(chartStyles)(Chart);\nexport default connect(mapStateToProps, null)(chart);","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport createStore from './Store';\nimport { ToastContainer } from 'react-toastify';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Water from './Components/WaterTemp/Index';\nimport Tester from './Components/Metrics/Metrics';\nimport Wrapper from './Components/Utils/Wrapper';\nimport Tubing from './Components/TubingPressure/TubingPressure';\nimport Casing from './Components/CasingPressure/Index';\nimport Flare from './Components/FlareTemp/Index';\nimport InjValve from './Components/InjValve/Index';\nimport Oil from './Components/OilTemp/Index';\nimport Chart from './Components/Chart/Chart';\nconst store = createStore();\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Provider store={store}>\n        <ToastContainer />\n        <h1>Well Hello!!!</h1>\n        <Wrapper>\n          <Water />\n          <Tubing />\n          <Casing />\n          <Flare />\n          <InjValve />\n          <Oil />\n        </Wrapper>\n        <Wrapper>\n          <Chart />\n        </Wrapper>\n        {/* <Tester /> */}\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport sagas from './sagas';\nimport tubingReducer from './reducers/TubingPressure';\nimport casingReducer from './reducers/CasingPressure';\nimport flareReducer from './reducers/FlareTemp';\nimport injValveReducer from './reducers/InjValveOpen';\nimport oilTempReducer from './reducers/OilTemp';\nimport waterTempReducer from './reducers/WaterTemp';\n\nexport default () => {\n    const rootReducer = combineReducers({\n        tubing: tubingReducer,\n        casing: casingReducer,\n        flare: flareReducer,\n        injValve: injValveReducer,\n        oil: oilTempReducer,\n        water: waterTempReducer\n    });\n    const composeEnhancers = composeWithDevTools({});\n    const sagaMiddleware = createSagaMiddleware();\n    const middlewares = applyMiddleware(sagaMiddleware);\n    const store = createStore(rootReducer, composeEnhancers(middlewares));\n    \n    sagas.forEach(sagaMiddleware.run);\n    console.log('Store is connected!');\n    \n    return store\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nconst urlClient = new ApolloClient({\n    uri: \"https://react.eogresources.com/graphql\"\n});\nReactDOM.render(\n    <ApolloProvider client={urlClient}>\n        <App />\n    </ApolloProvider>, \ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
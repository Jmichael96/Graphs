{"version":3,"sources":["Store/actions/actionTypes.js","Store/sagas/ApiErrors.js","Store/sagas/index.js","Store/reducers/TubingPressure.js","Store/reducers/CasingPressure.js","Store/reducers/FlareTemp.js","Store/reducers/InjValveOpen.js","Store/reducers/OilTemp.js","Store/reducers/WaterTemp.js","Components/Utils/Wrapper.jsx","Components/Chart/Chart.jsx","Components/Header/Header.jsx","Components/TubingPressure/TubingPressure.js","Components/CasingPressure/Index.js","Components/FlareTemp/Index.js","Components/InjValve/Index.js","Components/OilTemp/Index.js","Components/WaterTemp/Index.js","Pages/Metrics.jsx","App.jsx","Store/index.js","serviceWorker.js","index.jsx"],"names":["API_ERROR","apiErrorReceived","watchApiError","action","call","toast","error","takeEvery","actions","ApiErrors","initialState","metric","value","unit","at","fullDate","state","updatedObject","type","useStyles","makeStyles","theme","wrapper","height","display","flexFlow","padding","justifyContent","alignContent","Wrapper","props","classes","className","Chart","updateState","setState","tubingVal","tubing","waterVal","water","oilVal","oil","injVal","injValve","flareVal","flare","casingVal","casing","gettingData","updateHandler","this","windowSize","window","innerWidth","console","log","y","x","mode","name","hovertemplate","line","color","width","yaxis","newData","data","useResizeHandler","onInitialized","layout","title","showlegend","autosize","dragmode","xaxis","domain","autorange","showgrid","zeroline","showline","tickformat","titlefont","tickfont","range","tickwidth","position","yaxis2","anchor","overlaying","side","yaxis3","chart","React","Component","withStyles","border","borderRadius","connect","grow","flexGrow","textAlign","appBar","background","AppBar","Toolbar","Typography","variant","paper","margin","root","marginLeft","checked","fontSize","fontWeight","GET_TUBING","gql","getPressureData","metricName","useState","isChecked","dispatch","useDispatch","useSelector","useQuery","variables","pollInterval","loading","startPolling","stopPolling","useEffect","message","getLastKnownMeasurement","formattedDate","Date","newDateForm","Moment","format","lastValue","length","LinearProgress","Paper","FormControlLabel","control","Checkbox","onChange","event","target","label","labelPlacement","GET_CASING","getCasingData","GET_FLARE","getFlareData","GET_INJVALVE","getInjValveData","GET_OIL","getOilData","GET_WATER","getWaterData","Metrics","metrics","store","rootReducer","combineReducers","tubingReducer","casingReducer","flareReducer","injValveReducer","oilTempReducer","waterTempReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","sagas","forEach","run","App","CssBaseline","Header","Boolean","location","hostname","match","urlClient","ApolloClient","uri","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f507df88.chunk.js","sourcesContent":["export const API_ERROR = \"EVENT/API_ERROR_RECEIVED\";\nexport const WEATHER_DATA_RECEIVED = \"EVENT/WEATHER_DATA_RECEIVED\";\nexport const TUBING_PRESSURE_DATA_RECIEVED = \"EVENT/TUBING_PRESSURE_DATA_RECIEVED\";\nexport const GET_METRICS = \"EVENT/GET_METRICS\";\nexport const WATER_TEMP_RECIEVED = \"EVENT/WATER_TEMP_RECIEVED\";\nexport const OIL_TEMP_RECIEVED = \"EVENT/OIL_TEMP_RECIEVED\";\nexport const INJ_VALVE_RECIEVED = \"EVENT/INJ_VALVE_RECIEVED\";\nexport const FLARE_TEMP_RECIEVED = \"EVENT/FLARE_TEMP_RECIEVED\";\nexport const CASING_PRESSURE_RECIEVED = \"EVENT/CASING_PRESSURE_RECIEVED\";","import { takeEvery, call } from \"redux-saga/effects\";\nimport * as actions from \"../actions/actionTypes\";\nimport { toast } from \"react-toastify\";\n\nfunction* apiErrorReceived(action) {\n  yield call(toast.error, `Error Received: ${action.error}`);\n}\n\nfunction* watchApiError() {\n  yield takeEvery(actions.API_ERROR, apiErrorReceived);\n}\n\nexport default [watchApiError];\n","import ApiErrors from \"./ApiErrors\";\n\nexport default [...ApiErrors];","import * as actions from \"../actions/actionTypes\";\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.TUBING_PRESSURE_DATA_RECIEVED:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from \"../actions/actionTypes\";\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.CASING_PRESSURE_RECIEVED:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}\n","import * as actions from \"../actions/actionTypes\";\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.FLARE_TEMP_RECIEVED:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from \"../actions/actionTypes\";\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.INJ_VALVE_RECIEVED:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from \"../actions/actionTypes\";\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.OIL_TEMP_RECIEVED:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from \"../actions/actionTypes\";\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.WATER_TEMP_RECIEVED:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        height: '100%',\n        display: 'flex',\n        flexFlow: 'row wrap',\n        padding: '20px',\n        justifyContent: 'center',\n        alignContent: 'flex-start',\n    },\n}));\n\nfunction Wrapper(props) {\n    const classes = useStyles(useStyles);\n\n    return <main className={classes.wrapper} {...props} />;\n};\n\nexport default Wrapper;","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { connect } from \"react-redux\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst chartStyles = theme => ({\n  chart: {\n    border: \"2px solid black\",\n    borderRadius: \"4px\"\n  }\n});\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      tubingVal: null,\n      flareVal: null,\n      injVal: null,\n      oilVal: null,\n      waterVal: null,\n      casingVal: null,\n      gettingData: false,\n    }\n  }\n\n  componentWillReceiveProps() {\n    // if there is data from the store... update state\n    if (this.props) {\n      this.updateState();\n    }\n  }\n\n  updateState = () => {\n    this.setState({\n      tubingVal: this.props.tubing.value,\n      waterVal: this.props.water.value,\n      oilVal: this.props.oil.value,\n      injVal: this.props.injValve.value,\n      flareVal: this.props.flare.value,\n      casingVal: this.props.casing.value,\n      gettingData: true\n    });\n  }\n\n  updateHandler = () => {\n    // console.log(\"Chart has been initialized\");\n  }\n\n  render() {\n    const windowSize = window.innerWidth - 150;\n    const { tubingVal, oilVal, casingVal, injVal, waterVal, flareVal } = this.state;\n    console.log(casingVal);\n    console.log(flareVal)\n    const tubing = {\n      type: 'scatter',\n      y: tubingVal,\n      x: this.props.tubing.fullDate,\n      mode: 'lines',\n      name: this.props.tubing.metric,\n      hovertemplate: `${this.props.tubing.at} <br> ${this.props.tubing.metric}: %{y:.2f}<extra></extra>`,\n      line: {\n        color: 'red',\n        width: 2\n      }\n    };\n\n    const casing = {\n      type: 'scatter',\n      x: this.props.casing.fullDate,\n      y: casingVal,\n      mode: 'lines',\n      name: this.props.casing.metric,\n      hovertemplate: `${this.props.casing.at} <br> ${this.props.casing.metric}: %{y:.2f}<extra></extra>`,\n      line: {\n        color: 'orange',\n        width: 2\n      },\n    };\n\n    const oil = {\n      type: 'scatter',\n      y: oilVal,\n      x: this.props.oil.fullDate,\n      mode: 'lines',\n      name: this.props.oil.metric,\n      hovertemplate: `${this.props.oil.at} <br> ${this.props.oil.metric}: %{y:.2f}<extra></extra>`,\n      yaxis: 'y3',\n      line: {\n        color: 'black',\n        width: 2\n      }\n    };\n    const water = {\n      type: 'scatter',\n      y: waterVal,\n      x: this.props.water.fullDate,\n      yaxis: 'y3',\n      mode: 'lines',\n      name: this.props.water.metric,\n      hovertemplate: `${this.props.water.at} <br> ${this.props.water.metric}: %{y:.2f}<extra></extra>`,\n      line: {\n        color: 'blue',\n        width: 2\n      }\n    };\n    const flare = {\n      type: 'scatter',\n      x: this.props.flare.fullDate,\n      y: flareVal,\n      mode: 'lines',\n      name: this.props.flare.metric,\n      hovertemplate: `${this.props.flare.at} <br> ${this.props.flare.metric}: %{y:.2f}<extra></extra>`,\n      yaxis: 'y3',\n      line: {\n        color: 'pink',\n        width: 2\n      }\n    };\n    const injValve = {\n      type: 'scatter',\n      x: this.props.injValve.fullDate,\n      y: injVal,\n      yaxis: 'y2',\n      mode: 'lines',\n      name: this.props.injValve.metric,\n      hovertemplate: `${this.props.injValve.at} <br> ${this.props.injValve.metric}: %{y:.2f}<extra></extra>`,\n      line: {\n        color: 'green',\n        width: 2\n      }\n    };\n\n    const newData = [tubing, oil, injValve, flare, water, casing];\n    const { classes } = this.props;\n    return (\n      <Plot\n        data={newData}\n        useResizeHandler={true}\n        onInitialized={this.updateHandler}\n        layout={{\n          width: windowSize,\n          height: 650,\n          title: 'Metric Data Chart',\n          showlegend: true,\n          autosize: false,\n          dragmode: true,\n          xaxis: {\n            domain: [0.18, 1],\n            type: 'date',\n            autorange: true,\n            showgrid: false,\n            zeroline: false,\n            showline: false,\n            tickformat: '%-I:%M:%S'\n          },\n          yaxis: {\n            title: 'PSI',\n            titlefont: { color: '#1f77b4' },\n            tickfont: { color: '#1f77b4' },\n            showgrid: false,\n            range: [0, 2000],\n            showline: true,\n            tickwidth: 1,\n            position: 0.14,\n            type: 'linear',\n          },\n          yaxis2: {\n            title: 'Percent',\n            titlefont: { color: '#ff7f0e' },\n            tickfont: { color: '#ff7f0e' },\n            anchor: 'free',\n            overlaying: 'y',\n            side: 'left',\n            showgrid: false,\n            showline: true,\n            position: 0.07,\n            tickwidth: 1,\n            range: [0, 100],\n            type: 'linear',\n          },\n          yaxis3: {\n            title: 'Degrees',\n            titlefont: { color: 'red' },\n            tickfont: { color: 'red' },\n            anchor: 'free',\n            overlaying: 'y',\n            side: 'left',\n            showgrid: false,\n            showline: true,\n            position: 0,\n            tickwidth: 1,\n            range: [0, 500],\n            autorange: true,\n            zeroline: false,\n            type: 'linear',\n          },\n        }}\n        className={classes.chart}\n      />\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => ({\n  tubing: state.tubing,\n  water: state.water,\n  casing: state.casing,\n  flare: state.flare,\n  oil: state.oil,\n  injValve: state.injValve\n})\nconst chart = withStyles(chartStyles)(Chart);\nexport default connect(mapStateToProps, null)(chart);","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1,\n    textAlign: 'start'\n  },\n  appBar: {\n    background: 'navy'\n  }\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"Jeffrey's\";\n  return (\n    <AppBar className={classes.appBar}>\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} React Graph\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../Store/actions/actionTypes\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"red\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\n\nconst GET_TUBING = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getPressureData = state => {\n  const { metric, value, unit, at, fullDate } = state.tubing;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"tubingPressure\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getPressureData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_TUBING, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.TUBING_PRESSURE_DATA_RECIEVED, updatedObject });\n    },\n    [dispatch, error, data]\n\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n  // getting the last value of the state value array\n  let lastValue = value[value.length - 1];\n  \n  if (loading) return <LinearProgress />;\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} PSI</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../Store/actions/actionTypes\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"orange\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  },\n});\n\nconst GET_CASING = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getCasingData = state => {\n  const { metric, value, unit, at, fullDate } = state.casing;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"casingPressure\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getCasingData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_CASING, {\n    variables: { metricName },\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.CASING_PRESSURE_RECIEVED, updatedObject });\n    },\n    [dispatch, error, data]\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n\n  // getting the last value of the state value array\n  let lastValue = value[value.length - 1];\n  \n  if (loading) return <LinearProgress />;\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} PSI</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../Store/actions/actionTypes\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"pink\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\nconst GET_FLARE = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getFlareData = state => {\n  const { metric, value, unit, at, fullDate } = state.flare;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"flareTemp\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getFlareData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_FLARE, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.FLARE_TEMP_RECIEVED, updatedObject });\n    },\n    [dispatch, error, data]\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n  // getting the last value of the state value array\n  let lastValue = value[value.length - 1];\n  \n  if (loading) return <LinearProgress />;\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} F</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../Store/actions/actionTypes\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"green\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\n\nconst GET_INJVALVE = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getInjValveData = state => {\n  const { metric, value, unit, at, fullDate } = state.injValve;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"injValveOpen\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getInjValveData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_INJVALVE, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.INJ_VALVE_RECIEVED, updatedObject });\n    },\n    [dispatch, error, data]\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n  // getting the last value of the state value array\n  let lastValue = value[value.length - 1];\n  \n  if (loading) return <LinearProgress />;\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} %</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../Store/actions/actionTypes\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"black\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\nconst GET_OIL = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getOilData = state => {\n  const { metric, value, unit, at, fullDate } = state.oil;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"oilTemp\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getOilData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_OIL, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.OIL_TEMP_RECIEVED, updatedObject });\n    },\n    [dispatch, error, data]\n\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n  // getting the last value of the state value array\n  let lastValue = value[value.length - 1];\n  \n  if (loading) return <LinearProgress />;\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} F</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../Store/actions/actionTypes\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"blue\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\n\nconst GET_WATER = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getWaterData = state => {\n  const { metric, value, unit, at, fullDate } = state.water;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"waterTemp\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getWaterData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_WATER, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.WATER_TEMP_RECIEVED, updatedObject });\n    },\n    [dispatch, error, data]\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n\n  let lastValue = value[value.length - 1];\n\n  if (loading) return <LinearProgress />;\n  \n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} F</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Tubing from '../Components/TubingPressure/TubingPressure';\nimport Casing from '../Components/CasingPressure/Index';\nimport Flare from '../Components/FlareTemp/Index';\nimport InjValve from '../Components/InjValve/Index';\nimport Oil from '../Components/OilTemp/Index';\nimport Water from '../Components/WaterTemp/Index';\nimport Wrapper from '../Components/Utils/Wrapper';\n\nconst metricStyles = theme => ({\n\n});\n\n\nclass Metrics extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Wrapper>\n                    <Tubing />\n                    <Casing />\n                    <Flare />\n                    <InjValve />\n                    <Oil />\n                    <Water />\n                </Wrapper>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    water: state.water,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\n});\n\nconst metrics = withStyles(metricStyles)(Metrics);\nexport default connect(mapStateToProps, mapDispatchToProps)(metrics);","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport createStore from './Store';\nimport { ToastContainer } from 'react-toastify';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Wrapper from './Components/Utils/Wrapper';\nimport Chart from './Components/Chart/Chart';\nimport Header from './Components/Header/Header';\nimport Metrics from './Pages/Metrics';\n\nconst store = createStore();\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Provider store={store}>\n        <Header />\n        <ToastContainer />\n        <Metrics />\n        <Wrapper>\n          <Chart />\n        </Wrapper>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport sagas from './sagas';\nimport tubingReducer from './reducers/TubingPressure';\nimport casingReducer from './reducers/CasingPressure';\nimport flareReducer from './reducers/FlareTemp';\nimport injValveReducer from './reducers/InjValveOpen';\nimport oilTempReducer from './reducers/OilTemp';\nimport waterTempReducer from './reducers/WaterTemp';\n\nexport default () => {\n    const rootReducer = combineReducers({\n        tubing: tubingReducer,\n        casing: casingReducer,\n        flare: flareReducer,\n        injValve: injValveReducer,\n        oil: oilTempReducer,\n        water: waterTempReducer\n    });\n    const composeEnhancers = composeWithDevTools({});\n    const sagaMiddleware = createSagaMiddleware();\n    const middlewares = applyMiddleware(sagaMiddleware);\n    const store = createStore(rootReducer, composeEnhancers(middlewares));\n\n    sagas.forEach(sagaMiddleware.run);\n\n    return store\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nconst urlClient = new ApolloClient({\n    uri: \"https://react.eogresources.com/graphql\"\n});\nReactDOM.render(\n    <ApolloProvider client={urlClient}>\n        <App />\n    </ApolloProvider>, \ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
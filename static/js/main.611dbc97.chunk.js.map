{"version":3,"sources":["Store/actions/actionTypes.js","Store/sagas/ApiErrors.js","Store/sagas/index.js","Store/reducers/TubingPressure.js","Store/reducers/CasingPressure.js","Store/reducers/FlareTemp.js","Store/reducers/InjValveOpen.js","Store/reducers/OilTemp.js","Store/reducers/WaterTemp.js","Components/WaterTemp/Index.js","App.jsx","Store/index.js","serviceWorker.js","index.jsx"],"names":["API_ERROR","apiErrorReceived","watchApiError","action","call","toast","error","takeEvery","actions","ApiErrors","initialState","metric","value","unit","at","fullDate","state","updatedObject","type","useStyles","makeStyles","paper","width","height","margin","border","root","color","marginLeft","checked","data","fontSize","fontWeight","GET_WATER","gql","getWaterData","water","metricName","classes","useState","isChecked","setState","dispatch","useDispatch","useSelector","useQuery","variables","pollInterval","loading","startPolling","stopPolling","useEffect","message","getLastKnownMeasurement","formattedDate","Date","newDateForm","Moment","format","name","lastValue","length","LinearProgress","Paper","className","FormControlLabel","control","Checkbox","onChange","event","target","label","labelPlacement","store","rootReducer","combineReducers","tubing","tubingReducer","casing","casingReducer","flare","flareReducer","injValve","injValveReducer","oil","oilTempReducer","waterTempReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","sagas","forEach","run","console","log","App","CssBaseline","Boolean","window","location","hostname","match","urlClient","ApolloClient","uri","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.611dbc97.chunk.js","sourcesContent":["export const API_ERROR = 'EVENT/API_ERROR_RECIEVED';\nexport const RECIEVED_TUBING = 'EVENT/RECIEVED_TUBING';\nexport const RECIEVED_WATER = 'EVENT/RECIEVED_WATER';\nexport const FETCHING_WATER = 'EVENT/FETCHING_WATER';\nexport const RECIEVED_OIL = 'EVENT/RECIEVED_OIL';\nexport const RECIEVED_INJ_VALVE = 'EVENT/RECIEVED_INJ_VALVE';\nexport const RECIEVED_FLARE = 'EVENT/RECIEVED_FLARE';\nexport const RECIEVED_CASING = 'EVENT/RECIEVED_FLARE';\nexport const FETCH_METRICS = 'EVENT/FETCH_METRICS';\n\nexport default {\n    API_ERROR,\n    RECIEVED_CASING,\n    RECIEVED_TUBING,\n    RECIEVED_WATER,\n    RECIEVED_FLARE,\n    RECIEVED_INJ_VALVE,\n    FETCH_METRICS,\n    FETCHING_WATER,\n}","import { takeEvery, call } from \"redux-saga/effects\";\nimport * as actions from \"../actions/actionTypes\";\nimport { toast } from \"react-toastify\";\n\nfunction* apiErrorReceived(action) {\n  yield call(toast.error, `Error Received: ${action.error}`);\n}\n\nfunction* watchApiError() {\n  yield takeEvery(actions.API_ERROR, apiErrorReceived);\n}\n\nexport default [watchApiError];\n","import ApiErrors from \"./ApiErrors\";\n\nexport default [...ApiErrors];","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_TUBING:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_CASING:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}\n","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_FLARE:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_INJ_VALVE:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n\n    switch (action.type) {\n        case actions.RECIEVED_OIL:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import * as actions from '../actions/actionTypes';\n\nconst initialState = {\n    metric: \"\",\n    value: [],\n    unit: \"\",\n    at: \"\",\n    fullDate: []\n};\n\nexport default (state = initialState, action) => {\n    const { updatedObject } = action;\n    // console.log(updatedObject)\n    switch (action.type) {\n        case actions.RECIEVED_WATER:\n            return {\n                ...state,\n                metric: updatedObject.metric,\n                value: [...state.value, updatedObject.value],\n                unit: updatedObject.unit,\n                at: updatedObject.at,\n                fullDate: [...state.fullDate, updatedObject.fullDate],\n            };\n        default:\n            return state;\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from '../../Store/actions/actionTypes';\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport Moment from \"moment\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  // outer style of container\n  paper: {\n    width: \"210px\",\n    height: \"110px\",\n    margin: \"55px 5px 0 5px\",\n    border: \"1px solid black\",\n  },\n  // style of checkbox\n  root: {\n    color: \"black\",\n    \"&$checked\": {\n      color: \"blue\"\n    },\n    marginLeft: \"5px\"\n  },\n  checked: {},\n  // style of data text\n  data: {\n    fontSize: \"32px\",\n    fontWeight: 500,\n    margin: \"0 0 0 5px\"\n  }\n});\n\nconst GET_WATER = gql`\nquery($metricName: String!) {\ngetLastKnownMeasurement(metricName: $metricName){\n  metric\n  value\n  unit\n  at\n}\n}\n`;\n\nconst getWaterData = state => {\n  const { metric, value, unit, at, fullDate } = state.water;\n  return {\n    metric,\n    value,\n    unit,\n    at,\n    fullDate\n  };\n};\n\nexport default ({ metricName = \"waterTemp\" }) => {\n  const classes = useStyles();\n  // checkbox state\n  const [isChecked, setState] = useState({\n    checked: false,\n  });\n  // handling the change for the checkbox\n  const handleChange = name => event => {\n    setState({ ...isChecked, [name]: event.target.checked });\n  };\n  const dispatch = useDispatch();\n\n  const { metric, value } = useSelector(\n    getWaterData\n  );\n\n  const { loading, error, data, startPolling, stopPolling } = useQuery(GET_WATER, {\n    variables: { metricName },\n    pollInterval: 0,\n  });\n\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n\n      const { getLastKnownMeasurement } = data;\n      // formatting dates before dispatching\n      let formattedDate = new Date(getLastKnownMeasurement.at);\n      let newDateForm = Moment(formattedDate).format('ll hh:mm:ss a')\n      let fullDate = Moment(formattedDate).format('YYYY-MM-DD hh:mm:ss')\n      let updatedObject = {\n        metric: getLastKnownMeasurement.metric,\n        value: getLastKnownMeasurement.value,\n        at: newDateForm,\n        unit: getLastKnownMeasurement.unit,\n        fullDate: fullDate\n      }\n      dispatch({ type: actions.RECIEVED_WATER, updatedObject });\n    },\n    [dispatch, error, data]\n  );\n\n  // fetching function turning on or off the polling\n  function isFetching() {\n    if (isChecked.checked) {\n      startPolling(1300);\n    }\n    else if (isChecked) {\n      stopPolling();\n    }\n  }\n  isFetching();\n\n  let lastValue = value[value.length - 1];\n\n  if (loading) return <LinearProgress />;\n  \n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <FormControlLabel\n          control={<Checkbox\n            checked={isChecked.checked}\n            onChange={handleChange('checked')}\n            value=\"checkedA\"\n            color=\"default\"\n            classes={{\n              root: classes.root,\n              checked: classes.checked\n            }}\n          />\n          }\n          label={metric}\n          labelPlacement=\"end\"\n        />\n        {isChecked.checked ? <p className={classes.data}>{lastValue} F</p> : \"\"}\n      </Paper>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport createStore from './Store';\nimport { ToastContainer } from 'react-toastify';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Water from './Components/WaterTemp/Index';\n\nconst store = createStore();\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Provider store={store}>\n        <ToastContainer />\n        <h1>Well Hello!!!</h1>\n        <Water />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport sagas from './sagas';\nimport tubingReducer from './reducers/TubingPressure';\nimport casingReducer from './reducers/CasingPressure';\nimport flareReducer from './reducers/FlareTemp';\nimport injValveReducer from './reducers/InjValveOpen';\nimport oilTempReducer from './reducers/OilTemp';\nimport waterTempReducer from './reducers/WaterTemp';\n\nexport default () => {\n    const rootReducer = combineReducers({\n        tubing: tubingReducer,\n        casing: casingReducer,\n        flare: flareReducer,\n        injValve: injValveReducer,\n        oil: oilTempReducer,\n        water: waterTempReducer\n    });\n    const composeEnhancers = composeWithDevTools({});\n    const sagaMiddleware = createSagaMiddleware();\n    const middlewares = applyMiddleware(sagaMiddleware);\n    const store = createStore(rootReducer, composeEnhancers(middlewares));\n    \n    sagas.forEach(sagaMiddleware.run);\n    console.log('Store is connected!');\n    \n    return store\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nconst urlClient = new ApolloClient({\n    uri: \"https://react.eogresources.com/graphql\"\n});\nReactDOM.render(\n    <ApolloProvider client={urlClient}>\n        <App />\n    </ApolloProvider>, \ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}